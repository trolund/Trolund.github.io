<p>13/07 2019</p>
<p>
6.Semester er hermed afsluttet! 
</p>
<p>
Semestert gik med at lave Spil i Unity med C#, lave IOS App til firmaet SpinOff, samt en tilhørende backend bestående af en REST service og en firebase database. 
</p>
<p>
<img data-aos-once="true" style=" margin-left: 10px; vertical-align: middle; margin-right: auto; width: 60%; text-align:center;" src="assets/img/tower1.png" class="rightfloatContent">
<h2>Unity Spil</h2>
Vores spillet blev til et grundklægende "tower defence" spil, med tre typer af tårne samt 3 typer fjener.
<br><br>
Baner blive modeller som et 2D array af karaktere. 

<ul>
  <li>“#” - En platform som tårne kan stå på.</li>
  <li>" " - Et tomt rum hvor fjender kan bevæge sig. Tea</li>
  <li>"s" - Start position/instansierings punkt for fjender.</li>
  <li>"E" - Slut punkt/punkt hvor fjenden skader spilleren og forsvinder.</li>
</ul>

Selve instantieringen af banen foregår ved vi iterere gennem 2D array’et og med en switch, evaluere på hver enkelt karakter, og mappe dem til enten at instantiere et givent gameobject i vores 3D verden eller tilføje denne position til at være et område som kan betrædes af fjenderne.
</p>
<p>
<img data-aos-once="true" style=" margin-left: auto; margin-right: 10px; width: 60%; text-align:center;" src="assets/img/tower2.png" class="leftfloatContent">

Hver tårn har en rækkevide som helvist bestemes af tårntypen og af upgraderings nivuet. Tårnene har to møder at finde fejener. En hvor den skyder på den nærmeste og en hvor den skyder på den som er længest på banen.<br><br>

I spillet er der også lavet undertyper af fjender, som nedarver fra Enemy klassen. Det er blevet lavet med henblik på at lave forskellige typer af fjender, som har forskellige styrker/svagheder og som har forskellige ​evner​.

<br><br>

For at fjender skal kunne navigere igennem en bane fra start til slut, anvender spillet Bredde-først søgnings algoritmen til at finde en vej som de kan gå.
<br>

</p>

<style>
/* Slideshow container */
.slideshow-container {
  max-width: 200px;
  position: relative;
  margin: auto;
}

/* Caption text */
.text {
  color: #f2f2f2;
  font-size: 15px;
  padding: 8px 12px;
  position: absolute;
  bottom: 8px;
  width: 100%;
  text-align: center;
}

/* Number text (1/3 etc) */
.numbertext {
  color: #f2f2f2;
  font-size: 12px;
  padding: 8px 12px;
  position: absolute;
  top: 0;
  text-shadow: 0px 0px 5px #000;
}

/* The dots/bullets/indicators */
.dot {
  height: 15px;
  width: 15px;
  margin: 0 2px;
  background-color: #bbb;
  border-radius: 50%;
  display: inline-block;
  transition: background-color 0.6s ease;
}

.active {
  background-color: #717171;
}

/* Fading animation */
.fade {
  -webkit-animation-name: fade;
  -webkit-animation-duration: 1.5s;
  animation-name: fade;
  animation-duration: 1.5s;
}

@-webkit-keyframes fade {
  from {opacity: .4} 
  to {opacity: 1}
}

@keyframes fade {
  from {opacity: .4} 
  to {opacity: 1}
}

/* On smaller screens, decrease text size */
@media only screen and (max-width: 300px) {
  .text {font-size: 11px}
}
</style>

<div class="slideshow-container rightfloatContent">

<div class="mySlides fade">
  <div class="numbertext">1 / 4</div>
  <img src="assets/img/meetingapp1.png" style="width:100%">
  <div class="text"></div>
</div>

<div class="mySlides fade">
  <div class="numbertext">2 / 4</div>
  <img src="assets/img/meetingapp2.png" style="width:100%">
  <div class="text"></div>
</div>

<div class="mySlides fade">
  <div class="numbertext">3 / 4</div>
  <img src="assets/img/meetingapp3.png" style="width:100%">
  <div class="text"></div>
</div>

<div class="mySlides fade">
  <div class="numbertext">4 / 4</div>
  <img src="assets/img/meetingapp4.png" style="width:100%">
  <div class="text"></div>
</div>
    
<div style="text-align:center; margin-top: 10px;">
  <span class="dot"></span> 
  <span class="dot"></span> 
  <span class="dot"></span> 
  <span class="dot"></span> 
</div>
</div>
<p>
<h2>IOS app</h2>
Projektet består af en IOS app skrevet i Swift. App’en skal gøre det muligt for brugeren nemt kan give feedback efter møder, undervisning og andre sammenhænge hvor det vil være brugbart at kunne modtage feedback kort tid efter endt session.<br><br>
Dette gør at app’en har to brugere og derved opdelt i to dele. Der vil være en bruger som ikke behøver login, og blot vil skulle give feedback til den anden brugertype, mødeafholderen. Mødeafholderen vil skulle have et login med tilknytning til et virksomheds ID. Denne bruger vil skulle bruge app’en til at oprette, starte og modtage feedback.<br><br>
Dette skulle gerne give mødeafholderen den bedste mulighed for, at forbedre mødestruktur og formidling samt kunne evaluere på forståelse af det præsenterede materiale. Dette skulle gerne kunne bidrage til færre unødige møder, samt mere relevant indhold formidlet bedst muligt for den givende målgruppe.<br><br>
For at kunne opnå dette, bliver der i kurset 62596 Distribuerede systemer sideløbende udviklet en RESTful backend, som har et persistent datalag i form af en Firebase database.
</p>


<script>
var slideIndex = 0;
showSlides();

function showSlides() {
  var i;
  var slides = document.getElementsByClassName("mySlides");
  var dots = document.getElementsByClassName("dot");
  for (i = 0; i < slides.length; i++) {
    slides[i].style.display = "none";  
  }
  slideIndex++;
  if (slideIndex > slides.length) {slideIndex = 1}    
  for (i = 0; i < dots.length; i++) {
    dots[i].className = dots[i].className.replace(" active", "");
  }
  slides[slideIndex-1].style.display = "block";  
  dots[slideIndex-1].className += " active";
  setTimeout(showSlides, 2000); // Change image every 2 seconds
}
</script>


